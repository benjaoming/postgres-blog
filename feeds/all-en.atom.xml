<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Improved PostgreSQL support for Django</title><link href="http://postgres.mjtamlyn.co.uk/" rel="alternate"></link><link href="http://postgres.mjtamlyn.co.uk/feeds/all-en.atom.xml" rel="self"></link><id>http://postgres.mjtamlyn.co.uk/</id><updated>2014-03-15T00:00:00+00:00</updated><entry><title>Making a start</title><link href="http://postgres.mjtamlyn.co.uk/where-to-start.html" rel="alternate"></link><updated>2014-03-15T00:00:00+00:00</updated><author><name>Marc Tamlyn</name></author><id>tag:postgres.mjtamlyn.co.uk,2014-03-15:where-to-start.html</id><summary type="html">&lt;p&gt;The last month has been amazing for me. It feels like the whole Django
community has got behind this project and is looking forwards to it. An
enormous thank you to everyone who has contributed to the project. I am still
gathering together the details of the sponsors, but you can see a "raw" list on
&lt;a href="/pages/sponsors.html"&gt;this site&lt;/a&gt;. In particular, I'd like to thank the DSF,
Django stars, Judicata and Tangent Labs for their particularly generous
donations, but without all of you, none of what I'm about to do would be
possible.&lt;/p&gt;
&lt;p&gt;I've made a start writing some code. Easily one of the most popular features is
hstore. For those who might not be familiar, a postgres hstore is a bit like a
simple dictionary in a column - it contains a mapping of strings to strings.
They are one dimensional and completely free form - there is no guarantee about
which keys might exist. They are a really great way to add a small amount of
unstructured data to a model without making schema changes. You might be
tempted to just use json for this sort of functionality, but unless you need
the nested structures, hstore is much more powerful for querying and indexing.&lt;/p&gt;
&lt;p&gt;The problem with hstore is that it requires an extension. This is pretty
straightforwards for a production database - just type &lt;code&gt;CREATE EXTENSION
hstore&lt;/code&gt; at the prompt in that database once (before creating the tables) and
you're good to go. Where it becomes a problem for us is in testing - the newly
created test database does not have the &lt;code&gt;hstore&lt;/code&gt; extension. It would also be
nice if you didn't have to log on to your shell and run the &lt;code&gt;CREATE EXTENSION&lt;/code&gt;
directly, it was just created if you have a model using hstore.&lt;/p&gt;
&lt;p&gt;There are a few possible ways to acheive this using the new migrations
framework. The first (for which there is a &lt;a href="https://github.com/django/django/pull/2266"&gt;proposed
patch&lt;/a&gt;) is to extend
&lt;code&gt;Field.db_parameters()&lt;/code&gt; to allow it to return some &lt;code&gt;pre_create_sql&lt;/code&gt;, which will
be run every time a field of this type is created (either by adding a model
using the field, or by adding a field of this type to an already existing
model). This means the sql might be run many times and needs to be coded
defensively - that is use &lt;code&gt;CREATE EXTENSION IF NOT EXISTS&lt;/code&gt;. Whilst this patch
works, it introduces potentially a large number of unnecessary SQL statements
run against the database, and it also has no way to remove any extension if it
is no longer needed.&lt;/p&gt;
&lt;p&gt;An alternative is to create an initial migration in the postgres app which will
create all the necessary extensions that might be needed for all parts of the
app. This has a major drawback which is that it would create extensions even if
the project does not use that part of the code. As some extensions could
conceivably only for for some versions of PostgreSQL, these migrations might
not even work for all users.&lt;/p&gt;
&lt;p&gt;Another alternative is to introduce a new concept called an &lt;code&gt;Extension&lt;/code&gt; which
would be tracked by the autodetector for migrations. I'm going to try to create
a concrete patch for this to see how complex it is, but the idea does have some
usage outside of postgres as a means of allowing certain models or field types
to require custom functions to be created in the database, something which all
the supported databases have.&lt;/p&gt;
&lt;p&gt;This is going to take some time to get right, so in the mean time I'm going to
make a start on array fields. They're possibly my favourite feature in the
entire project and something I know I have half a dozen concrete use cases for.
One of the most interesting things about them is that they can be created for
almost any django field type (with the notable exception of
&lt;code&gt;ManyToManyField&lt;/code&gt;!), so there's a lot of possible edge cases, especially in the
admin widget. It will also be the first core field to have dynamic custom
lookups - a syntax along the lines of &lt;code&gt;.filter(myarray__0=17)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First things first however is the get the beta of 1.7 out of the door and get
the branch away for master. This will then allow me to start merging new
features into Django master. As always, community help with reviewing
prereleases of Django is enormously beneficial for the core team, so please do
go and download the new versions and test them out - there are loads of awesome
new features in 1.7!&lt;/p&gt;</summary><category term="django"></category><category term="postgres"></category><category term="kickstarter"></category></entry><entry><title>A wild Kickstarter appears!</title><link href="http://postgres.mjtamlyn.co.uk/launch.html" rel="alternate"></link><updated>2014-02-08T00:00:00+00:00</updated><author><name>Marc Tamlyn</name></author><id>tag:postgres.mjtamlyn.co.uk,2014-02-08:launch.html</id><summary type="html">&lt;p&gt;I love Django. I also love PostgreSQL.&lt;/p&gt;
&lt;p&gt;I've been fortunate enough to hear Craig Kersteins and Christophe Pettus talk
several times about how wonderful Postgres is. I've come away from Django
conferences filled with enthusiasm for the promised land of database
specificity, of semi-flexible schemas using hstore, of array fields, of json in
my database, of full text search and functional indexes and materialized views
andâ€¦ all the other wonderful features offered by Postgres.&lt;/p&gt;
&lt;p&gt;Then I go looking for third party packages to use these features. The state of
hstore is pretty good - I can install the &lt;code&gt;django-hstore&lt;/code&gt; package, add a model
and a custom manager to my model and everything works, even the admin. The API
for filtering is pretty good, I get some interesting atomic operations to
update keys via the custom manager, and there's even an interesting subclass
which extends the API to reference other model instances as the values. It's
not all perfect - the API could be more natural in some places (e.g.
&lt;code&gt;.filter(data__mykey=value)&lt;/code&gt; rather than &lt;code&gt;.filter(data__contains({'mykey':
'value'})&lt;/code&gt; - but we are pretty much there.&lt;/p&gt;
&lt;p&gt;What about arrays? Well according to django packages there are &lt;a href="https://www.djangopackages.com/grids/g/arrayfield/"&gt;several
different implementations&lt;/a&gt;,
none of which have Python3 support, none of which are currently actively
developed, and most of which don't even have documentation. Alternatively,
there's &lt;a href="https://github.com/niwibe/djorm-ext-pgarray"&gt;djorm-ext-pgarray&lt;/a&gt; which
is better, but it still requires me to understand how to use array fields in
SQL - I need to know what &lt;code&gt;@&amp;gt;&lt;/code&gt; means, using &lt;code&gt;SqlExpression&lt;/code&gt; objects in
&lt;code&gt;.where()&lt;/code&gt; clauses to build my queries. I need to know the postgres name for
the underlying database field I want to use. That's not the ORM I love.&lt;/p&gt;
&lt;p&gt;Now, I do not wish to appear too harsh on the developers of these pacakges and
others. Django has in no way helped them make it easy to provide nice APIs. The
custom field syntax is quite limited, only really allowing you to change the
mapping between the database structure and the python structure, and changing
the &lt;code&gt;db_type&lt;/code&gt; to modify creation. This gets a lot better in Django 1.7 as we
now have &lt;a href="https://docs.djangoproject.com/en/dev/ref/models/custom-lookups/"&gt;custom lookups and
transforms&lt;/a&gt;,
although they currently only work in &lt;code&gt;.filter()&lt;/code&gt; clauses. In particular, I'd
like to thank &lt;a href="https://github.com/niwibe"&gt;Andrey Antukh&lt;/a&gt; for his work on the
&lt;code&gt;pg-ext-*&lt;/code&gt; collection of packages, which have working implementations of most
of the features I wish to build directly into Django.&lt;/p&gt;
&lt;p&gt;That said, we can do better. Several people I've worked with, who I consider to
be very good Django developers, have absolutely no idea how to go about
constructing complex SQL queries by hand. Ask what the difference is between
a left and a right outer join and you'll just get a blank expression. Whilst
it's easy to be snarky about this and claim it's a failing in their education,
I prefer to see it as a huge compliment for the power of the Django ORM. These
people have managed to write numerous successful websites with the database at
the core of the functionality, without knowing how to interact with their
database directly. I would like the more advanced postgres features to have the
same ease of use.&lt;/p&gt;
&lt;p&gt;Whilst in Warsaw at the wonderful &lt;a href="http://2013.djangocon.eu/"&gt;Django Circus&lt;/a&gt;
conference last summer, I chatted a bit to members of the core team about this
concept, and the general state of postgres support in the community. There was
agreement that it was not ideal, and we could do better. The idea formed in my
head that we could build first class support for these features into Django
itself, with the understanding that using database specific functionality is
perfectly reasonable (if not required) for any large site.&lt;/p&gt;
&lt;p&gt;So I've decided to do something about it. The core team and the DSF have given
their backing for me to do exactly that - build first class support for
PostgreSQL specific features into Django. This will be as a new contrib module
- &lt;code&gt;django.contrib.postgres&lt;/code&gt;. This is not a small undertaking I can write in an
odd evening or weekend. I'm going to need your help to allow me to spend enough
time on it to make it good. To that end, and inspired by Andrew Godwin's
&lt;a href="http://www.kickstarter.com/projects/andrewgodwin/schema-migrations-for-django"&gt;success with
migrations&lt;/a&gt;,
I'm launching a Kickstarter hopefully at some point in the next week. The
initial aim is to ensure that most Postgres data types have a good Django
equivalent, and for full text search to be possible. With more funding, I'll
also make date based queries much more powerful, add dozens of postgres
specific functions as custom transforms and lookups, and add support for custom
indexes and views. It will take time to build all of this, but I'm confident at
least some features will land for Django 1.8, with most of the rest in Django
1.9.&lt;/p&gt;
&lt;p&gt;For reference, this is what I currently consider as the list of things each
field will need to be considered fully supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The field implementation itself, with appropriate keyword arguments to
  provide the same level of expression as the raw SQL equivalent&lt;/li&gt;
&lt;li&gt;Support for "standard" filters such as &lt;code&gt;__contains&lt;/code&gt;, &lt;code&gt;__lt&lt;/code&gt; etc if
  appropriate&lt;/li&gt;
&lt;li&gt;Support for appropriate custom filtering methods specific to the data type&lt;/li&gt;
&lt;li&gt;A usable, javascript-free form field&lt;/li&gt;
&lt;li&gt;Where appropriate, a cleverer custom widget for use in the admin&lt;/li&gt;
&lt;li&gt;Extensive tests for each field covering field creation and modification via
  migrations, all allowable query constructs and validation&lt;/li&gt;
&lt;li&gt;Documentation for the model field and form field, complete with examples and
  comments on possible use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading, and I hope you are as excited by this project as I am!&lt;/p&gt;</summary><category term="django"></category><category term="postgres"></category><category term="kickstarter"></category></entry></feed>